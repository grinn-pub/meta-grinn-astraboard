header:
  version: 17

distro: poky
machine: grinnastraevb

repos:
  meta-openembedded:
    url: https://github.com/openembedded/meta-openembedded.git
    refspec: 8bb16533532b6abc2eded7d9961ab2a108fd7a5b
    layers:
      meta-oe:
      meta-python:
      meta-multimedia:
      meta-filesystems:

  meta-qt5:
    url: https://code.qt.io/yocto/meta-qt5.git
    refspec: 644ebf220245bdc06e7696ccc90acc97a0dd2566
  
  meta-ros:
    url: https://github.com/ros/meta-ros.git
    refspec: b4db6314bae1c78498158e267200a9c15a739cad
    layers:
      meta-ros-common:

  meta-swupdate:
    url: https://github.com/sbabic/meta-swupdate.git
    refspec: 6918be849ddf1fed5b7a0173e51c7a136e8d4101

  meta-synaptics:
    url: https://github.com/synaptics-astra/meta-synaptics.git
    tag: v1.4.0

  poky:
    url: https://git.yoctoproject.org/poky.git
    refspec: 1e0d58c53b7d9c3feb631e46666ae7a3e3614253
    layers:
      meta:
      meta-poky:
      meta-yocto-bsp:

  meta-grinn-astraboard:
    url: https://github.com/grinn-pub/meta-grinn-astraboard.git
    tag: v1.1.0

local_conf_header:
  standard: |
    # This file is your local configuration file and is where all local user settings
    # are placed. The comments in this file give some guide to the options a new user
    # to the system might want to change but pretty much any configuration option can
    # be set in this file. More adventurous users can look at local.conf.extended
    # which contains other examples of configuration which can be placed in this file
    # but new users likely won't need any of them initially.
    #
    # Lines starting with the '#' character are commented out and in some cases the
    # default values are provided as comments to show people example syntax. Enabling
    # the option is a question of removing the # character and making any change to the
    # variable as required.

    #
    # Machine Selection
    #
    # You need to select a specific machine to target the build with. #MACHINE ?= "qemuarm"
    #MACHINE ?= "sl1640"
    #MACHINE ?= "sl1680"
    #MACHINE ?= "sl1620"

    #MACHINE ??= "sl1680"

    #
    # Where to place downloads
    #
    # During a first build the system will download many different source code tarballs
    # from various upstream projects. This can take a while, particularly if your network
    # connection is slow. These are all stored in DL_DIR. When wiping and rebuilding you
    # can preserve this directory to speed up this part of subsequent builds. This directory
    # is safe to share between multiple builds on the same machine too.
    #
    # The default is a downloads directory under TOPDIR which is the build directory.
    #
    #DL_DIR ?= "${TOPDIR}/downloads"

    #
    # Where to place shared-state files
    #
    # BitBake has the capability to accelerate builds based on previously built output.
    # This is done using "shared state" files which can be thought of as cache objects
    # and this option determines where those files are placed.
    #
    # You can wipe out TMPDIR leaving this directory intact and the build would regenerate
    # from these files if no changes were made to the configuration. If changes were made
    # to the configuration, only shared state files where the state was still valid would
    # be used (done using checksums).
    #
    # The default is a sstate-cache directory under TOPDIR.
    #
    #SSTATE_DIR ?= "${TOPDIR}/sstate-cache"

    #
    # Where to place the build output
    #
    # This option specifies where the bulk of the building work should be done and
    # where BitBake should place its temporary files and output. Keep in mind that
    # this includes the extraction and compilation of many applications and the toolchain
    # which can use Gigabytes of hard disk space.
    #
    # The default is a tmp directory under TOPDIR.
    #
    #TMPDIR = "${TOPDIR}/tmp"

    #
    # Default policy config
    #
    # The distribution setting controls which policy settings are used as defaults.
    # The default value is fine for general Yocto project use, at least initially.
    # Ultimately when creating custom policy, people will likely end up subclassing 
    # these defaults.
    #
    #DISTRO ?= "poky"
    # As an example of a subclass there is a "bleeding" edge policy configuration
    # where many versions are set to the absolute latest code from the upstream 
    # source control systems. This is just mentioned here as an example, its not
    # useful to most new users.
    # DISTRO ?= "poky-bleeding"

    #
    # Package Management configuration
    #
    # This variable lists which packaging formats to enable. Multiple package backends
    # can be enabled at once and the first item listed in the variable will be used
    # to generate the root filesystems.
    # Options are:
    #  - 'package_deb' for debian style deb files
    #  - 'package_ipk' for ipk files are used by opkg (a debian style embedded package manager)
    #  - 'package_rpm' for rpm style packages
    # E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
    # We default to rpm:
    PACKAGE_CLASSES ?= "package_deb"

    #
    # SDK target architecture
    #
    # This variable specifies the architecture to build SDK items for and means
    # you can build the SDK packages for architectures other than the machine you are
    # running the build on (i.e. building i686 packages on an x86_64 host).
    # Supported values are i686 and x86_64
    #SDKMACHINE ?= "i686"

    #
    # Extra image configuration defaults
    #
    # The EXTRA_IMAGE_FEATURES variable allows extra packages to be added to the generated
    # images. Some of these options are added to certain image types automatically. The
    # variable can contain the following options:
    #  "dbg-pkgs"       - add -dbg packages for all installed packages
    #                     (adds symbol information for debugging/profiling)
    #  "src-pkgs"       - add -src packages for all installed packages
    #                     (adds source code for debugging)
    #  "dev-pkgs"       - add -dev packages for all installed packages
    #                     (useful if you want to develop against libs in the image)
    #  "ptest-pkgs"     - add -ptest packages for all ptest-enabled packages
    #                     (useful if you want to run the package test suites)
    #  "tools-sdk"      - add development tools (gcc, make, pkgconfig etc.)
    #  "tools-debug"    - add debugging tools (gdb, strace)
    #  "eclipse-debug"  - add Eclipse remote debugging support
    #  "tools-profile"  - add profiling tools (oprofile, lttng, valgrind)
    #  "tools-testapps" - add useful testing tools (ts_print, aplay, arecord etc.)
    #  "debug-tweaks"   - make an image suitable for development
    #                     e.g. ssh root access has a blank password
    # There are other application targets that can be used here too, see
    # meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
    # We default to enabling the debugging tweaks.
    EXTRA_IMAGE_FEATURES ?= "debug-tweaks"

    #
    # Additional image features
    #
    # The following is a list of additional classes to use when building images which
    # enable extra features. Some available options which can be included in this variable
    # are:
    #   - 'buildstats' collect build statistics
    #   - 'image-mklibs' to reduce shared library files size for an image
    #   - 'image-prelink' in order to prelink the filesystem image
    # NOTE: if listing mklibs & prelink both, then make sure mklibs is before prelink
    # NOTE: mklibs also needs to be explicitly enabled for a given image, see local.conf.extended
    USER_CLASSES ?= "buildstats"

    #
    # Runtime testing of images
    #
    # The build system can test booting virtual machine images under qemu (an emulator)
    # after any root filesystems are created and run tests against those images. It can also
    # run tests against any SDK that are built. To enable this uncomment these lines.
    # See classes/test{image,sdk}.bbclass for further details.
    #IMAGE_CLASSES += "testimage testsdk"
    #TESTIMAGE_AUTO:qemuall = "1"

    #
    # Interactive shell configuration
    #
    # Under certain circumstances the system may need input from you and to do this it
    # can launch an interactive shell. It needs to do this since the build is
    # multithreaded and needs to be able to handle the case where more than one parallel
    # process may require the user's attention. The default is iterate over the available
    # terminal types to find one that works.
    #
    # Examples of the occasions this may happen are when resolving patches which cannot
    # be applied, to use the devshell or the kernel menuconfig
    #
    # Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
    # Note: currently, Konsole support only works for KDE 3.x due to the way
    # newer Konsole versions behave
    #OE_TERMINAL = "auto"
    # By default disable interactive patch resolution (tasks will just fail instead):
    PATCHRESOLVE = "noop"

    #
    # Disk Space Monitoring during the build
    #
    # Monitor the disk space during the build. If there is less that 1GB of space or less
    # than 100K inodes in any key build location (TMPDIR, DL_DIR, SSTATE_DIR), gracefully
    # shutdown the build. If there is less that 100MB or 1K inodes, perform a hard abort
    # of the build. The reason for this is that running completely out of space can corrupt
    # files and damages the build in ways which may not be easily recoverable.
    # It's necesary to monitor /tmp, if there is no space left the build will fail
    # with very exotic errors.
    BB_DISKMON_DIRS ??= "\
        STOPTASKS,${TMPDIR},1G,100K \
        STOPTASKS,${DL_DIR},1G,100K \
        STOPTASKS,${SSTATE_DIR},1G,100K \
        STOPTASKS,/tmp,100M,100K \
        HALT,${TMPDIR},100M,1K \
        HALT,${DL_DIR},100M,1K \
        HALT,${SSTATE_DIR},100M,1K \
        HALT,/tmp,10M,1K"

    #
    # Shared-state files from other locations
    #
    # As mentioned above, shared state files are prebuilt cache data objects which can
    # used to accelerate build time. This variable can be used to configure the system
    # to search other mirror locations for these objects before it builds the data itself.
    #
    # This can be a filesystem directory, or a remote url such as http or ftp. These
    # would contain the sstate-cache results from previous builds (possibly from other
    # machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
    # cache locations to check for the shared objects.
    # NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
    # at the end as shown in the examples below. This will be substituted with the
    # correct path within the directory structure.
    #SSTATE_MIRRORS ?= "\
    #file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \n \
    #file://.* file:///some/local/dir/sstate/PATH"

    #
    # Yocto Project SState Mirror
    #
    # The Yocto Project has prebuilt artefacts available for its releases, you can enable
    # use of these by uncommenting the following line. This will mean the build uses
    # the network to check for artefacts at the start of builds, which does slow it down
    # equally, it will also speed up the builds by not having to build things if they are
    # present in the cache. It assumes you can download something faster than you can build it
    # which will depend on your network.
    #
    #SSTATE_MIRRORS ?= "file://.* http://sstate.yoctoproject.org/2.5/PATH;downloadfilename=PATH"

    #
    # Hash Equivalence
    #
    # Enable support for automatically running a local hash equivalence server and
    # instruct bitbake to use a hash equivalence aware signature generator. Hash
    # equivalence improves reuse of sstate by detecting when a given sstate
    # artifact can be reused as equivalent, even if the current task hash doesn't
    # match the one that generated the artifact.
    #
    # A shared hash equivalent server can be set with "<HOSTNAME>:<PORT>" format
    #
    #BB_HASHSERVE = "auto"
    #BB_SIGNATURE_HANDLER = "OEEquivHash"

    # CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
    # track the version of this file when it was generated. This can safely be ignored if
    # this doesn't mean anything to you.
    CONF_VERSION = "2"

    # change the following to fetch from a non-standard release server
    # SYNA_RELEASE_GIT_HOST = "git@github.com/synaptics-astra"
    # SYNA_RELEASE_BRANCH = "v${ASTRA_VERSION}"
    # SYNA_RELEASE_GIT_PROTOCOL = "ssh"

    # fetch syna-sdk sources from a local checkout instead of the server
    # include /home/luki/Projects/test_orig/sdk/meta-synaptics/conf/syna-sources-local.conf

    # VSSDK contains some properietary components
    LICENSE_FLAGS_ACCEPTED = "commercial Synaptics-EULA"

    # by default these features are not required to build a valid image
    DISTRO_FEATURES:remove = "x11 3g nfc"
    DISTRO_FEATURES_NATIVESDK:remove = "x11"

    #Image version
    SYNA_SDK_REVISION = ""

    #Add buildinfo in image
    INHERIT += "image-buildinfo"
    IMAGE_BUILDINFO_VARS:append = " SYNA_SDK_REVISION"

    #Use systemd
    DISTRO_FEATURES:append = " systemd sysvinit"
    VIRTUAL-RUNTIME_init_manager = "systemd"
    DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"
    VIRTUAL-RUNTIME_initscripts = ""

    #Use and bundle initramfs
    INITRAMFS_IMAGE_BUNDLE = "1"
    INITRAMFS_IMAGE = "core-image-initramfs-boot"

    #OPTEE TA encryption
    OPTEE_TA_ENC= "prod"

    #Install and setup support for pre-built package feeds
    PACKAGE_FEED_URIS ?= "https://astra-packages.synaptics.com/${ASTRA_VERSION}"
    EXTRA_IMAGE_FEATURES += " package-management "

    IMAGE_FSTYPES += " synaimg ext4 ext4.gz"


target:
  - astra-media

